import os
import pandas as pd
import comtypes.client
import win32com.client
import shutil
from datetime import datetime
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import time
import ctypes
ctypes.windll.ole32.CoInitialize(None)  # 初始化 COM 库

# 定义文件夹路径
BASE_DIR = os.path.dirname(os.path.abspath(__file__))  # 脚本所在目录
PDF_FOLDER = os.path.join(BASE_DIR, "pdf_files")
WORD_FOLDER = os.path.join(BASE_DIR, "word_files")
EXCEL_FOLDER = os.path.join(BASE_DIR, "excel_files")
TOTAL_FOLDER = os.path.join(BASE_DIR, "total")  # 新增的 total 文件夹
SOURCE_FOLDER = os.path.join(BASE_DIR, r"E:\try\tryfile")  # 源文件夹路径

# 确保输出文件夹存在
os.makedirs(PDF_FOLDER, exist_ok=True)
os.makedirs(WORD_FOLDER, exist_ok=True)
os.makedirs(EXCEL_FOLDER, exist_ok=True)
os.makedirs(TOTAL_FOLDER, exist_ok=True)

# 记录上次运行时间
LAST_RUN_FILE = os.path.join(BASE_DIR, "last_run.txt")


def read_last_run_time():
    """读取上次运行的时间"""
    try:
        with open(LAST_RUN_FILE, "r") as file:
            last_run_time = file.read().strip()
            return datetime.strptime(last_run_time, "%Y-%m-%d %H:%M:%S")
    except (FileNotFoundError, ValueError):
        print("未找到上次运行时间记录，将处理所有文件。")
        return None


def write_last_run_time():
    """记录当前运行时间"""
    with open(LAST_RUN_FILE, "w") as file:
        file.write(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))


def convert_excel_to_csv(file_path, output_folder):
    """将 Excel 文件转换为 CSV 文件"""
    base_name, ext = os.path.splitext(os.path.basename(file_path))
    csv_file = os.path.join(output_folder, f"{base_name}.csv")
    total_csv_file = os.path.join(TOTAL_FOLDER, f"{base_name}.csv")  # 同步到 total 文件夹

    try:
        if ext.lower() in ['.xlsx', '.xls']:
            df = pd.read_excel(file_path, engine='openpyxl' if ext.lower() == '.xlsx' else 'xlrd')
            df.to_csv(csv_file, index=False, encoding='utf-8-sig')
            shutil.copy(csv_file, total_csv_file)  # 复制到 total 文件夹
            print(f"成功将 {file_path} 转换为 {csv_file}")
    except Exception as e:
        print(f"转换 {file_path} 时出错: {e}")


def convert_doc_to_docx(file_path, output_folder):
    """将 .doc 文件转换为 .docx 文件"""
    base_name, ext = os.path.splitext(os.path.basename(file_path))
    docx_file = os.path.join(output_folder, f"{base_name}.docx")
    total_docx_file = os.path.join(TOTAL_FOLDER, f"{base_name}.docx")  # 同步到 total 文件夹

    try:
        if ext.lower() == '.doc':
            word = comtypes.client.CreateObject('Word.Application')
            doc = word.Documents.Open(file_path)
            doc.SaveAs2(docx_file, FileFormat=16)  # FileFormat=16 表示 docx 格式
            doc.Close()
            word.Quit()
            shutil.copy(docx_file, total_docx_file)  # 复制到 total 文件夹
            print(f"成功将 {file_path} 转换为 {docx_file}")
    except Exception as e:
        print(f"转换 {file_path} 时出错: {e}")


def convert_pdf(file_path, output_folder):
    """将 PDF 文件复制到输出文件夹"""
    base_name = os.path.basename(file_path)
    output_path = os.path.join(output_folder, base_name)
    total_output_path = os.path.join(TOTAL_FOLDER, base_name)  # 同步到 total 文件夹
    try:
        shutil.copy(file_path, output_path)
        shutil.copy(file_path, total_output_path)  # 复制到 total 文件夹
        print(f"成功将 {file_path} 复制到 {output_path}")
    except PermissionError as e:
        print(f"复制 {file_path} 时权限不足: {e}")
    except Exception as e:
        print(f"复制 {file_path} 时出错: {e}")


class FileHandler(FileSystemEventHandler):
    """处理文件系统事件"""
    def on_created(self, event):
        """当文件被创建时触发"""
        if not event.is_directory:
            file_path = event.src_path
            print(f"检测到新文件: {file_path}")
            process_file(file_path)


def process_file(file_path):
    """处理单个文件"""
    _, ext = os.path.splitext(file_path)
    try:
        if ext.lower() in ['.xlsx', '.xls']:
            convert_excel_to_csv(file_path, EXCEL_FOLDER)
        elif ext.lower() == '.doc':
            convert_doc_to_docx(file_path, WORD_FOLDER)
        elif ext.lower() == '.pdf':
            convert_pdf(file_path, PDF_FOLDER)
        elif ext.lower() == '.docx':
            shutil.copy(file_path, WORD_FOLDER)
            shutil.copy(file_path, TOTAL_FOLDER)  # 复制到 total 文件夹
            print(f"已存在的 .docx 文件 {file_path} 已复制到 {WORD_FOLDER}")
        elif ext.lower() == '.csv':
            shutil.copy(file_path, EXCEL_FOLDER)
            shutil.copy(file_path, TOTAL_FOLDER)  # 复制到 total 文件夹
            print(f"已存在的 .csv 文件 {file_path} 已复制到 {EXCEL_FOLDER}")
        else:
            print(f"跳过不支持的文件格式: {file_path}")
    except PermissionError as e:
        print(f"处理 {file_path} 时权限不足: {e}")
    except Exception as e:
        print(f"处理 {file_path} 时出错: {e}")


def start_monitoring(input_dir):
    """启动文件夹监控"""
    event_handler = FileHandler()
    observer = Observer()
    observer.schedule(event_handler, input_dir, recursive=True)
    observer.start()
    print(f"正在监控文件夹: {input_dir}")
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()


if __name__ == "__main__":
    print("启动文件夹监控...")
    start_monitoring(SOURCE_FOLDER)
