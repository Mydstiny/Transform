import os
import shutil
import pandas as pd
import comtypes.client
import hashlib
import time
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import ctypes
import psutil
from collections import deque
import threading

# 初始化 COM 库（确保在主线程中初始化）
ctypes.windll.ole32.CoInitialize(None)

# 定义文件夹路径
BASE_DIR = os.path.dirname(os.path.abspath(__file__))  # 脚本所在目录
OUTPUT_DIR = os.path.join(BASE_DIR, r"E:\transform")  # 输出目录
TOTAL_FOLDER = os.path.join(OUTPUT_DIR, "total")  # 总文件夹

# 源文件夹路径和目标文件夹路径
SOURCE_FOLDER = r"E:\transform\tryfile"  # 源文件夹路径
TARGET_FOLDERS = {
    "港口": os.path.join(OUTPUT_DIR, "Gangkou"),
    "海事": os.path.join(OUTPUT_DIR, "Haishi"),
    "航道": os.path.join(OUTPUT_DIR, "Hangdao"),
    "运政": os.path.join(OUTPUT_DIR, "Yunzheng"),
    "区县指导": os.path.join(OUTPUT_DIR, "QUxianzhidao")
}

# 确保输出文件夹存在
os.makedirs(OUTPUT_DIR, exist_ok=True)
os.makedirs(TOTAL_FOLDER, exist_ok=True)
for folder in TARGET_FOLDERS.values():
    os.makedirs(folder, exist_ok=True)

# 记录已处理文件的哈希值
PROCESSED_HASHES_FILE = os.path.join(OUTPUT_DIR, "processed_hashes.txt")

# 读取已处理的哈希值
def read_processed_hashes():
    processed_hashes = {}
    try:
        with open(PROCESSED_HASHES_FILE, "r") as file:
            for line in file.readlines():
                parts = line.strip().split(",")
                if len(parts) == 3:
                    file_name, file_size, file_hash = parts
                    processed_hashes[(file_name, file_size)] = file_hash
    except FileNotFoundError:
        pass
    return processed_hashes

# 写入新处理的文件哈希值
def write_processed_hash(file_name, file_size, file_hash):
    with open(PROCESSED_HASHES_FILE, "a") as file:
        file.write(f"{file_name},{file_size},{file_hash}\n")

# 计算文件的哈希值
def get_file_hash(file_path):
    hash_md5 = hashlib.md5()
    with open(file_path, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_md5.update(chunk)
    return hash_md5.hexdigest()

# 检查文件是否被占用
def is_file_in_use(file_path):
    try:
        with open(file_path, "r+") as f:
            return False
    except IOError:
        return True

# 检查文件是否为临时文件或其他无关文件
def is_ignored_file(file_path):
    file_name = os.path.basename(file_path)
    if file_name.startswith("~$") or file_name.endswith(".tmp") or file_name.endswith(".DS_Store"):
        return True
    return False

# 获取文件所属的目标文件夹名称
def get_subfolder_name(file_path):
    relative_path = os.path.relpath(os.path.dirname(file_path), SOURCE_FOLDER)
    if relative_path == ".":
        return "区县指导"  # 默认分类到 "区县指导"
    subfolders = relative_path.split(os.sep)
    for folder in subfolders:
        if folder in TARGET_FOLDERS:
            return folder
    return "区县指导"

# 文件处理逻辑
def process_file(file_path, processed_hashes):
    if is_ignored_file(file_path):
        print(f"跳过无关文件: {file_path}")
        return
    if is_file_in_use(file_path):
        print(f"文件正在被占用，跳过处理: {file_path}")
        return
    _, ext = os.path.splitext(file_path)
    file_name = os.path.basename(file_path)
    file_size = os.path.getsize(file_path)
    file_identifier = (file_name, file_size)

    if file_identifier in processed_hashes:
        print(f"跳过已处理的文件: {file_path}")
        return

    try:
        subfolder_name = get_subfolder_name(file_path)
        target_folder = TARGET_FOLDERS[subfolder_name]
        file_hash = get_file_hash(file_path)
        write_processed_hash(file_name, file_size, file_hash)  # 记录文件信息

        if ext.lower() == '.pdf':
            convert_pdf(file_path, target_folder)
        elif ext.lower() in ['.doc', '.docx']:
            convert_doc_to_docx(file_path, target_folder)
        elif ext.lower() in ['.xlsx', '.xls', '.csv']:
            convert_excel_to_csv(file_path, target_folder)
        else:
            print(f"跳过不支持的文件格式: {file_path}")
    except Exception as e:
        print(f"处理 {file_path} 时出错: {e}")

# 文件转换函数
def convert_excel_to_csv(file_path, target_folder):
    base_name, ext = os.path.splitext(os.path.basename(file_path))
    csv_file = os.path.join(target_folder, f"{base_name}.csv")
    total_csv_file = os.path.join(TOTAL_FOLDER, f"{base_name}.csv")

    try:
        if ext.lower() in ['.xlsx', '.xls']:
            df = pd.read_excel(file_path, engine='openpyxl' if ext.lower() == '.xlsx' else 'xlrd')
            df.to_csv(csv_file, index=False, encoding='utf-8-sig')
            print(f"成功将 {file_path} 转换为 {csv_file}")
        elif ext.lower() == '.csv':
            shutil.copy(file_path, csv_file)
            print(f"成功将 {file_path} 复制到 {csv_file}")

        file_hash = get_file_hash(csv_file)
        if not os.path.exists(total_csv_file) or file_hash not in read_processed_hashes().values():
            shutil.copy(csv_file, total_csv_file)
            print(f"成功将 {csv_file} 复制到 {total_csv_file}")
        else:
            print(f"跳过已存在的文件: {total_csv_file}")
    except Exception as e:
        print(f"转换 {file_path} 时出错: {e}")

def convert_doc_to_docx(file_path, target_folder):
    base_name, ext = os.path.splitext(os.path.basename(file_path))
    docx_file = os.path.join(target_folder, f"{base_name}.docx")
    total_docx_file = os.path.join(TOTAL_FOLDER, f"{base_name}.docx")

    try:
        # 确保在使用 COM 对象之前初始化 COM 库
        ctypes.windll.ole32.CoInitialize(None)

        if ext.lower() == '.doc':
            word = comtypes.client.CreateObject('Word.Application')
            doc = word.Documents.Open(file_path)
            doc.SaveAs2(docx_file, FileFormat=16)
            doc.Close()
            word.Quit()
            print(f"成功将 {file_path} 转换为 {docx_file}")
        elif ext.lower() == '.docx':
            shutil.copy(file_path, docx_file)
            print(f"成功将 {file_path} 复制到 {docx_file}")

        file_hash = get_file_hash(docx_file)
        if not os.path.exists(total_docx_file) or file_hash not in read_processed_hashes().values():
            shutil.copy(docx_file, total_docx_file)
            print(f"成功将 {docx_file} 复制到 {total_docx_file}")
        else:
            print(f"跳过已存在的文件: {total_docx_file}")
    except Exception as e:
        print(f"转换 {file_path} 时出错: {e}")
    finally:
        # 确保释放 COM 库
        ctypes.windll.ole32.CoUninitialize()

def convert_pdf(file_path, target_folder):
    base_name = os.path.basename(file_path)
    output_path = os.path.join(target_folder, base_name)
    total_output_path = os.path.join(TOTAL_FOLDER, base_name)

    try:
        shutil.copy(file_path, output_path)
        print(f"成功将 {file_path} 复制到 {output_path}")

        file_hash = get_file_hash(file_path)
        if not os.path.exists(total_output_path) or file_hash not in read_processed_hashes().values():
            shutil.copy(file_path, total_output_path)
            print(f"成功将 {file_path} 复制到 {total_output_path}")
        else:
            print(f"跳过已存在的文件: {total_output_path}")
    except Exception as e:
        print(f"复制 {file_path} 时出错: {e}")

# 文件系统事件处理器
class FileHandler(FileSystemEventHandler):
    def __init__(self):
        self.processed_hashes = read_processed_hashes()
        self.processed_files = set()
        self.file_queue = deque()
        self.lock = threading.Lock()
        self.processing_thread = threading.Thread(target=self.process_queue)
        self.processing_thread.daemon = True
        self.processing_thread.start()

    def on_created(self, event):
        if not event.is_directory:
            self.file_queue.append(event.src_path)

    def on_modified(self, event):
        if not event.is_directory:
            self.file_queue.append(event.src_path)

    def process_queue(self):
        while True:
            if self.file_queue:
                with self.lock:
                    file_path = self.file_queue.popleft()
                    if file_path not in self.processed_files:
                        process_file(file_path, self.processed_hashes)
                        self.processed_files.add(file_path)
                time.sleep(1)

def start_monitoring(input_dir):
    event_handler = FileHandler()
    observer = Observer()
    observer.schedule(event_handler, input_dir, recursive=True)
    observer.start()
    print(f"正在监控文件夹: {input_dir}")
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()

# 初始处理源文件夹中的文件
def initial_process():
    processed_hashes = read_processed_hashes()
    for root, _, files in os.walk(SOURCE_FOLDER):
        for file in files:
            file_path = os.path.join(root, file)
            process_file(file_path, processed_hashes)

if __name__ == "__main__":
    print("开始处理源文件夹中的文件...")
    initial_process()
    print("初始处理完成，开始监控...")
    start_monitoring(SOURCE_FOLDER)
